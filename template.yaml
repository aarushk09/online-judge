AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  online-judge

  Sample SAM Template for online-judge
  
Globals:
  Function:
    MemorySize: 1769
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:
  ExecuteFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: 
        Fn::If:
          - IsNotProdStack
          - !Sub "online-judge-ExecuteFunction-${AWS::StackName}"
          - online-judge-ExecuteFunction
      AutoPublishAlias: live
      Timeout: 8
      # we should probably not hardcode this...
      VpcConfig:
        # these settings prevent internet access. only include this in
        # production -- I haven't figured out how to get the staging
        # environment working with this...
        Fn::If:
          - IsNotProdStack
          - !Ref AWS::NoValue
          - 
            SecurityGroupIds:
              - sg-0bc4a61cfc9289d08
            SubnetIds:
              - subnet-097720d648805d3ed
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./execute
      Dockerfile: Dockerfile
  SubmitFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 
        Fn::If:
          - IsNotProdStack
          - !Sub "online-judge-SubmitFunction-${AWS::StackName}"
          - online-judge-SubmitFunction
      CodeUri: submit/
      AutoPublishAlias: live
      Handler: dist/src/app.lambdaHandler
      Runtime: nodejs18.x
      Timeout: 10
      Policies: 
        - LambdaInvokePolicy:
            FunctionName:
              !Ref ExecuteFunction
        - DynamoDBCrudPolicy:
            TableName:
              !Ref StatisticsDynamoDBTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref DynamoDBTable
      Environment:
        Variables:
          # for now, assume we are either in staging or in production.
          # we need to know if we are staging or production to know
          # which DynamoDB tables to write to, which functions to call, etc
          IS_STAGING: !If [IsNotProdStack, "true", "false"]
      Events:
        Execute:
          Type: Api
          Properties:
            Path: /execute
            Method: post
        CreateSubmission:
          Type: Api
          Properties:
            Path: /submissions
            Method: post
        GetSubmission:
          Type: Api
          Properties:
            Path: /submissions/{submissionID}
            Method: get
    Metadata:
      BuildMethod: makefile

  StatisticsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: 
        Fn::If:
          - IsNotProdStack
          - !Sub "online-judge-statistics-${AWS::StackName}"
          - online-judge-statistics
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        - AttributeName: id
          KeyType: HASH

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: 
        Fn::If:
          - IsNotProdStack
          - !Sub "online-judge-${AWS::StackName}"
          - online-judge
      AttributeDefinitions: 
        - AttributeName: submissionID
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        - AttributeName: submissionID
          KeyType: HASH


Outputs:
  ExecuteFunction:
    Description: "Execute Lambda Function ARN"
    Value: !GetAtt ExecuteFunction.Arn
  SubmitFunction:
    Description: "Submit Lambda Function ARN"
    Value: !GetAtt SubmitFunction.Arn
  StatisticsDynamoDBTable:
    Description: "Statistics Dyanmo DB Table ARN"
    Value: !GetAtt StatisticsDynamoDBTable.Arn
  DynamoDBTable:
    Description: "Main Dyanmo DB Table ARN"
    Value: !GetAtt DynamoDBTable.Arn

Conditions:
  IsNotProdStack: !Not [!Equals [!Ref "AWS::StackName", "Prod"]]
