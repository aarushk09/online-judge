{
  "language": "java",
  "compilerOptions": "",
  "filename": "Main.java",
  "sourceCode": "// Expect output of 10\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n  \npublic class Main {\n  \n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(tokenizer.nextToken());\n        int m = Integer.parseInt(tokenizer.nextToken());\n        List<Integer>[] adj = new List[(2 * n) + 1];\n        for (int a = 1; a <= 2 * n; a++) {\n            adj[a] = new ArrayList<>();\n        }\n        for (int j = 1; j <= m; j++) {\n            tokenizer = new StringTokenizer(in.readLine());\n            int a = Integer.parseInt(tokenizer.nextToken());\n            int b = Integer.parseInt(tokenizer.nextToken());\n            adj[a].add(b + n);\n            adj[b + n].add(a);\n            adj[a + n].add(b);\n            adj[b].add(a + n);\n        }\n        int[] dist = new int[(2 * n) + 1];\n        Arrays.fill(dist, -1);\n        dist[1] = 0;\n        LinkedList<Integer> q = new LinkedList<>();\n        q.add(1);\n        while (!q.isEmpty()) {\n            int a = q.remove();\n            for (int b : adj[a]) {\n                if (dist[b] == -1) {\n                    dist[b] = dist[a] + 1;\n                    q.add(b);\n                }\n            }\n        }\n        int answer = 0;\n        if (dist[n + 1] == -1) {\n            answer = n - 1;\n        } else {\n            TreeMap<Pair, Integer> freq = new TreeMap<>();\n            TreeMap<Pair, List<Integer>> buckets = new TreeMap<>();\n            for (int a = 1; a <= n; a++) {\n                freq.merge(new Pair(Math.min(dist[a], dist[n + a]), Math.max(dist[a], dist[n + a])), 1, Integer::sum);\n                buckets.computeIfAbsent(new Pair(Math.min(dist[a], dist[n + a]), Math.max(dist[a], dist[n + a])), __ -> new ArrayList<>()).add(a);\n            }\n            TreeMap<Pair, Integer> edgeAmt = new TreeMap<>();\n            for (Map.Entry<Pair, Integer> entry : freq.entrySet()) {\n                Pair p = entry.getKey();\n                int f = entry.getValue();\n                int prev = edgeAmt.getOrDefault(new Pair(p.first - 1, p.second + 1), 0);\n                if (p.second == p.first + 1) {\n                    if (p.first == 0) {\n                        answer += (f + 1) / 2;\n                    } else if (freq.containsKey(new Pair(p.first - 1, p.second - 1))) {\n                        answer += Math.max((f - prev) + ((prev + 1) / 2), (f + 1) / 2);\n                    } else {\n                        if (prev < f) {\n                            answer += f - prev;\n                        }\n                        answer += (f + 1) / 2;\n                    }\n                } else {\n                    answer += f;\n                    if (p.first == 0) {\n                        edgeAmt.put(p, f);\n                    } else if (freq.containsKey(new Pair(p.first - 1, p.second - 1))) {\n                        edgeAmt.put(p, Math.min(f, prev));\n                    } else {\n                        if (prev < f) {\n                            answer += f - prev;\n                        }\n                        edgeAmt.put(p, f);\n                    }\n                }\n            }\n        }\n        System.out.println(answer);\n    }\n  \n    static class Pair implements Comparable<Pair> {\n        final int first;\n        final int second;\n  \n        Pair(int first, int second) {\n            this.first = first;\n            this.second = second;\n        }\n  \n        @Override\n        public int compareTo(Pair other) {\n            if (first != other.first) {\n                return first - other.first;\n            } else {\n                return second - other.second;\n            }\n        }\n    }\n}\n",
  "input": "8 10\n1 2\n1 3\n1 4\n1 5\n2 6\n3 7\n4 8\n5 8\n6 7\n8 8"
}
